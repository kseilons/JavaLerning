package ninth;

//Класс для создания объектов в цепочке:
class MyClass {
// Целочисленное поле:
int number;
// Ссылка на следующий объект в цепочке:
MyClass next;
}

//Главный класс:
class ListOfObjectsDemo {
// Статический метод для создания цепочки объектов:
static MyClass createList(int n) {
   // Создание первого объекта:
   MyClass obj = new MyClass();
   // Целочисленное поле первого объекта:
   obj.number = 1;
   // Ссылка на последний (и пока что единственный)
   // объект в цепочке:
   MyClass t = obj;
   // Создание цепочки объектов:
   for (int k = 1; k <= n; k++) {
      // Создается новый объект и ссылка на него
      // записывается в поле next последнего (на
      // данный момент) объекта в цепочке:
      t.next = new MyClass();
      // Вычисление значения числового поля вновь
      // созданного объекта:
      t.next.number = t.number * (n - k + 1) / k;
      // Созданный объект становится последним объектом
      // в цепочке объектов:
      t = t.next;
   }
   // Пустая ссылка для поля next последнего
   // объекта в цепочке:
   t.next = null;
   // Результат метода - ссылка на первый объект
   // в цепочке:
   return obj;
}

// Статический метод для отображения значений числовых
// полей объектов из цепочки:
static void showList(MyClass obj) {
   // Начальное значение текстовой переменной:
   String txt = "| ";
   // Ссылка на первый объект в цепочке:
   MyClass t = obj;
   // Добавление к тексту значений числовых полей:
   do {
      // К тексту дописывается значение числового поля
      // объекта, на который ссылается переменная t:
      txt += t.number + " | ";
      // Переменная t указывает на следующий объект:
      t = t.next;
   } while (t != null);
   // Отображение значений биномиальных коэффициентов:
   System.out.println(txt);
}

// Главный метод программы:
public static void main(String[] args) {
   // Создание цепочек объектов:
   MyClass A = createList(5);
   MyClass B = createList(10);
   // Отображение биномиальных коэффициентов:
   showList(A);
   showList(B);
}
}